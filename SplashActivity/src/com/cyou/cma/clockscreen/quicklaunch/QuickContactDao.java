package com.cyou.cma.clockscreen.quicklaunch;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QUICK_CONTACT.
*/
public class QuickContactDao extends AbstractDao<QuickContact, Long> {

    public static final String TABLENAME = "QUICK_CONTACT";

    /**
     * Properties of entity QuickContact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContactName = new Property(1, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property ContactNumber = new Property(2, String.class, "contactNumber", false, "CONTACT_NUMBER");
        public final static Property PhotoUri = new Property(3, String.class, "photoUri", false, "PHOTO_URI");
        public final static Property LaunchSetIdOfContact = new Property(4, Long.class, "launchSetIdOfContact", false, "LAUNCH_SET_ID_OF_CONTACT");
        public final static Property FolderIdOfContact = new Property(5, Long.class, "folderIdOfContact", false, "FOLDER_ID_OF_CONTACT");
    };

    private DaoSession daoSession;

    private Query<QuickContact> quickFolder_QuickContactListQuery;

    public QuickContactDao(DaoConfig config) {
        super(config);
    }
    
    public QuickContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QUICK_CONTACT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CONTACT_NAME' TEXT NOT NULL ," + // 1: contactName
                "'CONTACT_NUMBER' TEXT NOT NULL ," + // 2: contactNumber
                "'PHOTO_URI' TEXT," + // 3: photoUri
                "'LAUNCH_SET_ID_OF_CONTACT' INTEGER," + // 4: launchSetIdOfContact
                "'FOLDER_ID_OF_CONTACT' INTEGER);"); // 5: folderIdOfContact
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUICK_CONTACT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuickContact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getContactName());
        stmt.bindString(3, entity.getContactNumber());
 
        String photoUri = entity.getPhotoUri();
        if (photoUri != null) {
            stmt.bindString(4, photoUri);
        }
 
        Long launchSetIdOfContact = entity.getLaunchSetIdOfContact();
        if (launchSetIdOfContact != null) {
            stmt.bindLong(5, launchSetIdOfContact);
        }
 
        Long folderIdOfContact = entity.getFolderIdOfContact();
        if (folderIdOfContact != null) {
            stmt.bindLong(6, folderIdOfContact);
        }
    }

    @Override
    protected void attachEntity(QuickContact entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public QuickContact readEntity(Cursor cursor, int offset) {
        QuickContact entity = new QuickContact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // contactName
            cursor.getString(offset + 2), // contactNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photoUri
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // launchSetIdOfContact
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // folderIdOfContact
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QuickContact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContactName(cursor.getString(offset + 1));
        entity.setContactNumber(cursor.getString(offset + 2));
        entity.setPhotoUri(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLaunchSetIdOfContact(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setFolderIdOfContact(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(QuickContact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(QuickContact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "quickContactList" to-many relationship of QuickFolder. */
    public List<QuickContact> _queryQuickFolder_QuickContactList(Long folderIdOfContact) {
        synchronized (this) {
            if (quickFolder_QuickContactListQuery == null) {
                QueryBuilder<QuickContact> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FolderIdOfContact.eq(null));
                quickFolder_QuickContactListQuery = queryBuilder.build();
            }
        }
        Query<QuickContact> query = quickFolder_QuickContactListQuery.forCurrentThread();
        query.setParameter(0, folderIdOfContact);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLaunchSetDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getQuickFolderDao().getAllColumns());
            builder.append(" FROM QUICK_CONTACT T");
            builder.append(" LEFT JOIN LAUNCH_SET T0 ON T.'LAUNCH_SET_ID_OF_CONTACT'=T0.'_id'");
            builder.append(" LEFT JOIN QUICK_FOLDER T1 ON T.'FOLDER_ID_OF_CONTACT'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected QuickContact loadCurrentDeep(Cursor cursor, boolean lock) {
        QuickContact entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        LaunchSet launchSet = loadCurrentOther(daoSession.getLaunchSetDao(), cursor, offset);
        entity.setLaunchSet(launchSet);
        offset += daoSession.getLaunchSetDao().getAllColumns().length;

        QuickFolder quickFolder = loadCurrentOther(daoSession.getQuickFolderDao(), cursor, offset);
        entity.setQuickFolder(quickFolder);

        return entity;    
    }

    public QuickContact loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<QuickContact> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<QuickContact> list = new ArrayList<QuickContact>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<QuickContact> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<QuickContact> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
