package com.cyou.cma.clockscreen.quicklaunch;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table QUICK_FOLDER.
 */
public class QuickFolder {

    private Long id;
    /** Not-null value. */
    private String folderName;
    private Integer subCount;
    private Long launchSetIdOfFolder;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuickFolderDao myDao;

    private LaunchSet launchSet;
    private Long launchSet__resolvedKey;

    private List<QuickContact> quickContactList;
    private List<QuickApplication> quickApplicationList;

    public QuickFolder() {
    }

    public QuickFolder(Long id) {
        this.id = id;
    }

    public QuickFolder(Long id, String folderName, Integer subCount, Long launchSetIdOfFolder) {
        this.id = id;
        this.folderName = folderName;
        this.subCount = subCount;
        this.launchSetIdOfFolder = launchSetIdOfFolder;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuickFolderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getFolderName() {
        return folderName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFolderName(String folderName) {
        this.folderName = folderName;
    }

    public Integer getSubCount() {
        return subCount;
    }

    public void setSubCount(Integer subCount) {
        this.subCount = subCount;
    }

    public Long getLaunchSetIdOfFolder() {
        return launchSetIdOfFolder;
    }

    public void setLaunchSetIdOfFolder(Long launchSetIdOfFolder) {
        this.launchSetIdOfFolder = launchSetIdOfFolder;
    }

    /** To-one relationship, resolved on first access. */
    public LaunchSet getLaunchSet() {
        Long __key = this.launchSetIdOfFolder;
        if (launchSet__resolvedKey == null || !launchSet__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LaunchSetDao targetDao = daoSession.getLaunchSetDao();
            LaunchSet launchSetNew = targetDao.load(__key);
            synchronized (this) {
                launchSet = launchSetNew;
            	launchSet__resolvedKey = __key;
            }
        }
        return launchSet;
    }

    public void setLaunchSet(LaunchSet launchSet) {
        synchronized (this) {
            this.launchSet = launchSet;
            launchSetIdOfFolder = launchSet == null ? null : launchSet.getId();
            launchSet__resolvedKey = launchSetIdOfFolder;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<QuickContact> getQuickContactList() {
        if (quickContactList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuickContactDao targetDao = daoSession.getQuickContactDao();
            List<QuickContact> quickContactListNew = targetDao._queryQuickFolder_QuickContactList(id);
            synchronized (this) {
                if(quickContactList == null) {
                    quickContactList = quickContactListNew;
                }
            }
        }
        return quickContactList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetQuickContactList() {
        quickContactList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<QuickApplication> getQuickApplicationList() {
        if (quickApplicationList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuickApplicationDao targetDao = daoSession.getQuickApplicationDao();
            List<QuickApplication> quickApplicationListNew = targetDao._queryQuickFolder_QuickApplicationList(id);
            synchronized (this) {
                if(quickApplicationList == null) {
                    quickApplicationList = quickApplicationListNew;
                }
            }
        }
        return quickApplicationList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetQuickApplicationList() {
        quickApplicationList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
