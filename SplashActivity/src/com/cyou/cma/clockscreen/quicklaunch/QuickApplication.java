package com.cyou.cma.clockscreen.quicklaunch;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table QUICK_APPLICATION.
 */
public class QuickApplication {

    private Long id;
    /** Not-null value. */
    private String packageName;
    /** Not-null value. */
    private String mainActivityClassName;
    private Long launchSetIdOfApplication;
    private Long folderIdOfApplication;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuickApplicationDao myDao;

    private LaunchSet launchSet;
    private Long launchSet__resolvedKey;

    private QuickFolder quickFolder;
    private Long quickFolder__resolvedKey;


    public QuickApplication() {
    }

    public QuickApplication(Long id) {
        this.id = id;
    }

    public QuickApplication(Long id, String packageName, String mainActivityClassName, Long launchSetIdOfApplication, Long folderIdOfApplication) {
        this.id = id;
        this.packageName = packageName;
        this.mainActivityClassName = mainActivityClassName;
        this.launchSetIdOfApplication = launchSetIdOfApplication;
        this.folderIdOfApplication = folderIdOfApplication;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuickApplicationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getPackageName() {
        return packageName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPackageName(String packageName) {
        this.packageName = packageName;
    }

    /** Not-null value. */
    public String getMainActivityClassName() {
        return mainActivityClassName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMainActivityClassName(String mainActivityClassName) {
        this.mainActivityClassName = mainActivityClassName;
    }

    public Long getLaunchSetIdOfApplication() {
        return launchSetIdOfApplication;
    }

    public void setLaunchSetIdOfApplication(Long launchSetIdOfApplication) {
        this.launchSetIdOfApplication = launchSetIdOfApplication;
    }

    public Long getFolderIdOfApplication() {
        return folderIdOfApplication;
    }

    public void setFolderIdOfApplication(Long folderIdOfApplication) {
        this.folderIdOfApplication = folderIdOfApplication;
    }

    /** To-one relationship, resolved on first access. */
    public LaunchSet getLaunchSet() {
        Long __key = this.launchSetIdOfApplication;
        if (launchSet__resolvedKey == null || !launchSet__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LaunchSetDao targetDao = daoSession.getLaunchSetDao();
            LaunchSet launchSetNew = targetDao.load(__key);
            synchronized (this) {
                launchSet = launchSetNew;
            	launchSet__resolvedKey = __key;
            }
        }
        return launchSet;
    }

    public void setLaunchSet(LaunchSet launchSet) {
        synchronized (this) {
            this.launchSet = launchSet;
            launchSetIdOfApplication = launchSet == null ? null : launchSet.getId();
            launchSet__resolvedKey = launchSetIdOfApplication;
        }
    }

    /** To-one relationship, resolved on first access. */
    public QuickFolder getQuickFolder() {
        Long __key = this.folderIdOfApplication;
        if (quickFolder__resolvedKey == null || !quickFolder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuickFolderDao targetDao = daoSession.getQuickFolderDao();
            QuickFolder quickFolderNew = targetDao.load(__key);
            synchronized (this) {
                quickFolder = quickFolderNew;
            	quickFolder__resolvedKey = __key;
            }
        }
        return quickFolder;
    }

    public void setQuickFolder(QuickFolder quickFolder) {
        synchronized (this) {
            this.quickFolder = quickFolder;
            folderIdOfApplication = quickFolder == null ? null : quickFolder.getId();
            quickFolder__resolvedKey = folderIdOfApplication;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
